<%- include('../partials/adminHeader') -%>

<div class="content">
  <div class="d-flex justify-content-between align-items-center heading">
    <h2>Offer Management</h2>
  </div>

  <!-- Flash Messages -->
  <% if (successMessage && successMessage.length > 0) { %>
    <div class="alert alert-success"><%= successMessage %></div>
  <% } %>
  <% if (errorMessage && errorMessage.length > 0) { %>
    <div class="alert alert-danger"><%= errorMessage %></div>
  <% } %>

  <div class="card shadow-sm p-4">
    <div class="d-flex justify-content-between mb-3">
      <button class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#offerModal" id="addNewOfferBtn">+ Add New Offer</button>
      <%- include('../partials/_searchAndSort', {
            search: search,
            sort: sort,
            filters: [],
            sortOptions: [
              { label: 'Newest', value: '-createdAt' },
              { label: 'Oldest', value: 'createdAt' },
            ],
            entityName: 'offers'
      }) %>
    </div>

    <div id="offersDataSection">
      <table class="table text-center">
        <thead>
          <tr>
            <th class="text-start">Type</th>
            <th>Category/Product</th>
            <th>Discount Type</th>
            <th>Discount</th>
            <th>Valid From</th>
            <th>Valid To</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (offers.length > 0) { %>
          <% offers.forEach((offer) => { %>
            <tr class="align-middle">
              <td class="text-start"><%= offer.offerType %></td>
              <td><%= offer.typeId ? offer.typeId.name : 'N/A' %></td>
              <td><%= offer.discountType %></td>
              <td><%= offer.discountRate %></td>
              <td><%= offer.startDate.toISOString().split('T')[0] %></td>
              <td><%= offer.endDate.toISOString().split('T')[0] %></td>
              <td class="d-flex align-items-center justify-content-center">
                <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#offerModal"
                  data-id="<%= offer._id %>"
                  data-type="<%= offer.offerType %>"
                  data-entity="<%= offer.typeId ? offer.typeId._id : '' %>" 
                  data-discountType="<%= offer.discountType %>" 
                  data-discount="<%= offer.discountRate %>" 
                  data-start="<%= offer.startDate.toISOString().split('T')[0] %>" 
                  data-end="<%= offer.endDate.toISOString().split('T')[0] %>">
                  <i class='bx bx-edit'></i>
                </button>
                <button class="btn btn-light ms-2" data-bs-toggle="modal" data-bs-target="#deleteOfferModal" 
                  data-id="<%= offer._id %>">
                  <i class="bx bx-trash" style="color: #dc3545;"></i>
                </button>
              </td>
            </tr>
          <% }) %>
          <% } else { %>
            <tr>
              <td colspan="6">No Offers found</td>
            </tr>
          <% } %>
        </tbody>
      </table>

      <%- offers.length > 0 ? include('../partials/_pagination', { pagination }): '' %>
    </div>

    <!-- Modal for Add/Edit Offer -->
    <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="offerModalLabel">Add Offer</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="offerForm" action="/admin/offer/save" method="POST">
              <input type="hidden" id="offerId" name="offerId">

              <div class="mb-3">
                <label for="offerType" class="form-label">Offer Type<span class="required-star">*</span></label>
                <select id="offerType" name="offerType" class="form-select" data-required="true">
                  <option selected disabled>None</option>
                  <option value="Category">Category</option>
                  <option value="Product">Product</option>
                </select>
                <div class="error-message" id="offerTypeError"></div>
              </div>

              <div class="mb-3">
                <label for="typeId" class="form-label">Select Category/Product<span class="required-star">*</span></label>
                <select class="form-select" id="typeId" name="typeId" data-required="true">
                  <option selected disabled>None</option>
                  <!-- Populate with categories/products dynamically -->
                </select>
                <div class="error-message" id="typeIdError"></div>
              </div>

              <div class="mb-3">
                <label for="discountType" class="form-label">Discount Type<span class="required-star">*</span></label>
                <select id="discountType" name="discountType" class="form-select" data-required="true">
                  <option disabled selected>None</option>
                  <option value="Percentage">Percentage (%)</option>
                  <option value="Flat">Flat Amount ($)</option>
                  <div class="error-message" id="discountTypeError"></div>
                </select>
              </div>

              <div class="mb-3">
                <label for="discountRate" class="form-label">Discount<span class="required-star">*</span> (%)</label>
                <input type="number" id="discountRate" name="discountRate" class="form-control" data-required="true">
                <div class="error-message" id="discountRateError"></div>
              </div>

              <div class="mb-3">
                <label for="startDate" class="form-label">Valid From<span class="required-star">*</span></label>
                <input type="date" id="startDate" name="startDate" class="form-control" data-required="true">
                <div class="error-message" id="startDateError"></div>
              </div>

              <div class="mb-3">
                <label for="endDate" class="form-label">Valid To<span class="required-star">*</span></label>
                <input type="date" id="endDate" name="endDate" class="form-control" data-required="true">
                <div class="error-message" id="endDateError"></div>
              </div>
              <div class="form-check">
                <input type="checkbox" class="form-check-input" id="isActive" name="isActive" checked>
                <label for="isActive" class="form-check-label">Active</label>
              </div>

              <!-- Modal Footer -->
              <div class="modal-footer justify-content-start px-0">
                <button type="button" class="btn btn-light ms-0" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-dark">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal for Delete Confirmation -->
    <div class="modal fade" id="deleteOfferModal" tabindex="-1" aria-labelledby="deleteOfferModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="deleteOfferModalLabel">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            Are you sure you want to delete this offer?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
            <form id="deleteOfferForm" action="" method="POST" class="d-inline">
              <input type="hidden" id="deleteOfferId" name="offerId">
              <button type="submit" class="btn btn-danger">Delete</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Populate the modal with offer data for editing
  document.querySelectorAll('[data-bs-target="#offerModal"]').forEach(button => {
    button.addEventListener('click', function() {
      const offerId = this.getAttribute('data-id');
      const offerType = this.getAttribute('data-type');
      const typeId = this.getAttribute('data-entity');
      const discountType = this.getAttribute('data-discountType');
      const discount = this.getAttribute('data-discount');
      const startDate = this.getAttribute('data-start');
      const endDate = this.getAttribute('data-end');

      // Set values in the modal
      document.getElementById('offerId').value = offerId;
      document.getElementById('offerType').value = offerType;
      document.getElementById('discountType').value = discountType;
      document.getElementById('discountRate').value = discount;
      document.getElementById('startDate').value = startDate;
      document.getElementById('endDate').value = endDate;

      // Fetch the correct entities based on offerType
      const targetEntitySelect = document.getElementById('typeId');
      targetEntitySelect.innerHTML = '<option selected disabled>None</option>'; // Clear previous options

      // Update the form action dynamically
      const form = document.getElementById('offerForm');
      form.action = offerId ? `/admin/offer/save/${offerId}` : '/admin/offer/save'; // Update for editing or use default action for adding

      if (offerType) {
        const endpoint = `/admin/entities?offerType=${offerType}`; // Adjust your endpoint accordingly

        fetch(endpoint)
          .then(response => response.json())
          .then(data => {
            // Populate the second dropdown
            data.forEach(item => {
              const option = document.createElement('option');
              option.value = item._id;
              option.textContent = item.name;
              if (item._id === typeId) { // Select the current entity if it matches
                option.selected = true;
              }
              targetEntitySelect.appendChild(option);
            });
          })
          .catch(error => console.error('Error fetching entities:', error));
      }
    });
  });

  // Reset modal when opened for adding a new offer
  const offerModal = document.getElementById('offerModal');
  offerModal.addEventListener('show.bs.modal', function (event) {
    const button = event.relatedTarget;

    if (!button.getAttribute('data-id')) {
      // If no offer ID, reset the form for a new offer
      const form = document.getElementById('offerForm');
      form.action = '/admin/offer/save'; // Reset action to default for adding
      form.reset(); // Clear form fields
      document.getElementById('offerModalLabel').textContent = 'Add Offer'; // Change title
    } else {
      document.getElementById('offerModalLabel').textContent = 'Edit Offer'; // Change title for editing
    }
  });

  // Handle deletion confirmation
  document.querySelectorAll('[data-bs-target="#deleteOfferModal"]').forEach(button => {
    button.addEventListener('click', function() {
      const offerId = this.getAttribute('data-id');
      document.getElementById('deleteOfferId').value = offerId; // Set the offer ID in the delete form
      document.getElementById('deleteOfferForm').action = `/admin/offer/delete/${offerId}`; // Update form action
    });
  });

  document.getElementById('offerType').addEventListener('change', function () {
    const offerType = this.value; // Get selected offerType (category/product)
    const targetEntitySelect = document.getElementById('typeId'); // Second dropdown

    if (offerType) {
      // Use the unified route with the offerType as a query parameter
      const endpoint = `/admin/entities?offerType=${offerType}`;
      
      fetch(endpoint)
        .then(response => response.json())
        .then(data => {
          targetEntitySelect.innerHTML = '<option selected disabled>None</option>'; // Clear previous options
          // Populate new options dynamically
          data.forEach(item => {
            const option = document.createElement('option');
            option.value = item._id;
            option.textContent = item.name;
            targetEntitySelect.appendChild(option);
          });
        })
        .catch(error => console.error('Error fetching data:', error));
    }
  });
</script>

<%- include('../partials/adminFooter') -%>
